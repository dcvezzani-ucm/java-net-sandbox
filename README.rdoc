A Java-based RESTful client used to inactivate a Box user using Box's RESTful API.

== Prerequisites

* Java 1.7 (http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html)
* Eclipse (Version: Juno Service Release 2; Build id: 20130225-0426) (https://eclipse.org/downloads/packages/release/juno/sr2)
* Maven 3.1.1 (http://maven.apache.org/download.cgi)
* TcpMon 1.1 (https://code.google.com/p/tcpmon/)

Eclipse and Maven can be used together to provide a rich environment in which to develop Java applications.  Eclipse with Maven plugins can be used by those who would wish to use a graphical interface.  Maven from the command line can be used by those who enjoy the speed in a terminal window.  Developers with either preference can co-exist well in a code repository thanks to Maven.

Make sure the following Eclipse plugins are installed.

Help > Eclipse Marketplace...

Eclipse Marketplace
* AnyEdit Tools (workset management)
* EGit - Git Team Provider (git support)
* JAutodoc (javadoc convenience)
* JVM Monitor (profiler)
* Maven Integration for Eclipse WTP (Juno) (Maven support)
* Vrapper (Vim) (Vim support)

Yoxos Marketplace
* Vrapper - Surround Plugin (Optional)

TcpMon is a nice tool that may be used to sniff HTTP or HTTPS transport packets.

== Assumptions

Service will be run in a Unix (or Unix-like) environment.  I use Mac OS.  A different OS can most certainly be used, but slight modifications to the following instructions will likely be necessary.

== Prepare for use

RESTful service

Start up simple RESTful web service (https://github.com/dcvezzani-ucm/simple_rest_service)

  # e.g., 
  cd ~/rails-app/simple_service
  ./start.sh
  ./open.sh

Start up TcpMon

  # e.g., 
  BASE_PATH=~/Downloads
  java -cp "${BASE_PATH}/tcpmon-1.1.jar" com.codegoogle.tcpmon.MainWindow

... and configure

  local port:   3771
  server port:  3772

The client makes a request to TcpMon and TcpMon proxies the request to the RESTful service.  The top results pane shows the request headers and the bottom pane shows the response headers.

Set up the Java-based web client (implemented with the java.net library).

1. git clone https://github.com/dcvezzani-ucm/java-net-sandbox.git
1. start Eclipse
1. create or select a workspace in which to place the project
1. in terminal window, go to directory of selected workspace
1. import "Existing Projects into Workspace"

== Start

1. in "Package Explorer" pane, select "user-inactivate-client" and expand
1. locate and open "src/test/java/edu/ucmerced/box/client/Sandbox.java"
1. "Run As" "Java Application"

The results should include something like the following at the bottom of the console pane/tab.

  ****** Content of the URL ********
  {"greeting":{"phrase":"nice to meet you"}}
  CookieHandler retrieved cookie: XSRF-TOKEN=j9kw6GBuUPITkavXtKWUFHMZQL7GZSsVNhBerSTHcys%3D
  CookieHandler retrieved cookie: _simple_service_session=bHBvZ1Q3Lys1Q0owcEIxelRIMHZiSHduSiswdllnS2Y2Uy9teUg3U2ROcVAxUmNCckw3S3N4ZExHaXVRcXFuQndBQWo4WE5qUXJhWTlyL2F3Q0ZvYWhveFB1MkRRZGlWeGZqcmtqVDFCQXJRSVo2VjBucmpyMUZIazI3K0dMSU1KT1h3d3VXTXJ0NnJCS1dUMGJ5ODRUVmlLSzAzSUlWSDNKVXE2R21GMy8rVEU0TXVXbjNPcC9KcFFYZzF1N2dLLS1Ld0ZJRHUrK3RIRXFCTXIvRlFZWWdnPT0%3D--c834303acc98dde7e3c605750198a19b1d54709d
  CookieHandler retrieved cookie: blah=spice-cookie
  CookieHandler retrieved cookie: request_method=POST

The #main method has several commented lines.  Each line tests the java.net library out for various feature support such as headers, cookies, HTTPS, GET, POST and url parameters.  All of these methods may be run at once or each can be run in isolation.  

The purpose of this project is to verify that java.net supports the various elements required in the RESTful client that is currently being developed.
